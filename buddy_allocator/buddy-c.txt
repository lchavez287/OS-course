/**
 * Buddy Allocator
 *
 * For the list library usage, see http://www.mcs.anl.gov/~kazutomo/list/
 */

/**************************************************************************
 * Conditional Compilation Options
 **************************************************************************/
#define USE_DEBUG 0

/**************************************************************************
 * Included Files
 **************************************************************************/
#include <stdio.h>
#include <stdlib.h>

#include "buddy.h"
#include "list.h"

/**************************************************************************
 * Public Definitions
 **************************************************************************/
#define MIN_ORDER 12
#define MAX_ORDER 20

#define PAGE_SIZE (1<<MIN_ORDER)
/* page index to address */
#define PAGE_TO_ADDR(page_idx) (void *)((page_idx*PAGE_SIZE) + g_memory)

/* address to page index */
#define ADDR_TO_PAGE(addr) ((unsigned long)((void *)addr - (void *)g_memory) / PAGE_SIZE)

/* find buddy address */
#define BUDDY_ADDR(addr, o) (void *)((((unsigned long)addr - (unsigned long)g_memory) ^ (1<<o)) \
									 + (unsigned long)g_memory)

#if USE_DEBUG == 0
#  define PDEBUG(fmt, ...) \
	fprintf(stderr, "%s(), %s:%d: " fmt,			\
		__func__, __FILE__, __LINE__, ##__VA_ARGS__)
#  define IFDEBUG(x) x
#else
#  define PDEBUG(fmt, ...)
#  define IFDEBUG(x)
#endif

/**************************************************************************
 * Public Types
 **************************************************************************/
typedef struct {
	struct list_head list;
	/* TODO: DECLARE NECESSARY MEMBER VARIABLES */
  int p_index;
  int b_size;
  char *b_addr
} page_t;

/**************************************************************************
 * Global Variables
 **************************************************************************/
/* free lists*/
struct list_head free_area[MAX_ORDER+1];

/* memory area */
char g_memory[1<<MAX_ORDER];

/* page structures */
page_t g_pages[(1<<MAX_ORDER)/PAGE_SIZE];

/**************************************************************************
 * Public Function Prototypes
 **************************************************************************/

/**************************************************************************
 * Local Functions
 **************************************************************************/

/**
 * Initialize the buddy system
 */
void buddy_init()
{
	int i;
	int n_pages = (1<<MAX_ORDER) / PAGE_SIZE;
	for (i = 0; i < n_pages; i++) {
		/* TODO: INITIALIZE PAGE STRUCTURES */
	  INIT_LIST_HEAD(&g_pages[i].list);
	  g_pages[i].b_addr = PAGE_TO_ADDR(i);
	  g_pages[i].b_size = -1;
	  g_pages[i].p_index = i;
	}

	/* initialize freelist */
	for (i = MIN_ORDER; i <= MAX_ORDER; i++) {
		INIT_LIST_HEAD(&free_area[i]);
	}

	g_pages[0].b_size = MAX_ORDER;

	/* add the entire memory as a freeblock */
	list_add(&g_pages[0].list, &free_area[MAX_ORDER]);
}

/**
 * Allocate a memory block.
 *
 * On a memory request, the allocator returns the head of a free-list of the
 * matching size (i.e., smallest block that satisfies the request). If the
 * free-list of the matching block size is empty, then a larger block size will
 * be selected. The selected (large) block is then splitted into two smaller
 * blocks. Among the two blocks, left block will be used for allocation or be
 * further splitted while the right block will be added to the appropriate
 * free-list.
 *
 * @param size size in bytes
 * @return memory block address
 */
void *buddy_alloc(int size)
{
	
  //printf("did I get here?");
	/* TODO: IMPLEMENT THIS FUNCTION */
	//first check if the size is within the size of the min/max order

  if (size >= (1 << (MAX_ORDER+1)) || size < MIN_ORDER) {
		return NULL;
  }
    int b_order = MIN_ORDER;
    // determine the next order
    while(b_order <= (MAX_ORDER) && ((1 << b_order) < size)) {
	  
	  b_order++;
	}
    //if(order = MAX_ORDER)

	//printf("I made it out of the while loop with an order of %d\n", b_order);

	//return NULL;
	int i;
	for (i = b_order; i <= MAX_ORDER; i++) {
		if (!(list_empty(&free_area[i]))) {
			//there is a block order that fulfils the request
			//now need to take the block out of the free_area[i] list
			page_t *b_left, *b_right;
			int b_page_index;
			//int b_page_order;
			char* b_page_addr;
			if(i == b_order) {
				b_left = list_entry(free_area[i].next, page_t, list);
				list_del(&(b_left->list));

			}
			else {
                            //recursion

			  //printf("starting recursion\n");
			  //                        printf("pringing b_order %d\n", b_order);

				b_left = &g_pages[ADDR_TO_PAGE(buddy_alloc((1 << (b_order+1))))];
				b_page_index = b_left->p_index + ((1 << b_order) / PAGE_SIZE);

				//   		printf("page index is %d\n", b_page_index);
				b_right = &g_pages[b_page_index];
				list_add(&(b_right->list), &free_area[b_order]);
			}
			b_left->b_size = b_order;
			b_page_addr = PAGE_TO_ADDR(b_left->p_index);
			return b_page_addr;

		}
		
	       
	}
        
	return NULL;
}

/**
 * Free an allocated memory block.
 *
 * Whenever a block is freed, the allocator checks its buddy. If the buddy is
 * free as well, then the two buddies are combined to form a bigger block. This
 * process continues until one of the buddies is not free.
 *
 * @param addr memory block address to be freed
 */
void buddy_free(void *addr)
{
	/* TODO: IMPLEMENT THIS FUNCTION */
	 int index = ADDR_TO_PAGE(addr);
         page_t *temp;
         int order = g_pages[index].b_size;
	 
#if USE_DEBUG
	 //	 printf("this is the page address of the block about to be freed %d with order %d\n",index, order); 
#endif
	 // page_t *buddy;
	 struct list_head *temp2;
	 int i;
	 for(i = 0;i<(1<<MAX_ORDER);order++){
	   temp = NULL;
	   //   buddy = &g_pages[ADDR_TO_PAGE(BUDDY_ADDR(PAGE_TO_ADDR(temp->p_index),order))];
	   /* if(order == MAX_ORDER){
	     temp->b_size = order;
	     list_add(&temp->list,&free_area[order]);
	     }*/
	   
	   //page_t *buddy = &g_pages[ADDR_TO_PAGE(BUDDY_ADDR(PAGE_TO_ADDR(temp->b_size),order))];
	   list_for_each(temp2,&free_area[order]){	
	     temp = list_entry(temp2,page_t, list);
	     if(temp == NULL){
	       break;
	     }
	     //buddies
	     else if(temp->b_addr == BUDDY_ADDR(addr,order)){
	       break;
	     }
	   }
	    if(temp == NULL){
	      g_pages[index].b_size = -1;
	      list_add(&g_pages[index].list, &free_area[order]);
	      return;
	    }
	    else if(temp->b_addr != BUDDY_ADDR(addr,order)){
	      g_pages[index].b_size = -1;
	      list_add(&g_pages[index].list,&free_area[order]);
	      return;
	    }
	    if((char*) addr > temp->b_addr){
	      addr = temp->b_addr;
	      index = ADDR_TO_PAGE(addr);
	    }
	    list_del(&(temp->list));
       	     
	 }
}

/**
 * Print the buddy system status---order oriented
 *
 * print free pages in each order.
 */
void buddy_dump()
{
	int o;
	for (o = MIN_ORDER; o <= MAX_ORDER; o++) {
		struct list_head *pos;
		int cnt = 0;
		list_for_each(pos, &free_area[o]) {
			cnt++;
		}
		printf("%d:%dK ", cnt, (1<<o)/1024);
	}
	printf("\n");
}
